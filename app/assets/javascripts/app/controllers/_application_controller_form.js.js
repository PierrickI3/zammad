// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

App.ControllerForm = (function(_super) {
  __extends(ControllerForm, _super);

  function ControllerForm(params) {
    this.html = __bind(this.html, this);
    var key, value;

    for (key in params) {
      value = params[key];
      this[key] = value;
    }
    this.attribute_count = 0;
    if (!this.form) {
      this.form = this.formGen();
    }
    if (this.el) {
      this.el.prepend(this.form);
    }
    if (typeof this.form === 'object') {
      this.form.find('input').trigger('change');
      this.form.find('textarea').trigger('change');
      this.form.find('select').trigger('change');
    }
  }

  ControllerForm.prototype.html = function() {
    return this.form.html();
  };

  ControllerForm.prototype.formGen = function() {
    var attribute, attribute_clean, fieldset, item, _i, _len, _ref;

    App.Log.debug('ControllerForm', 'formGen', this.model.configure_attributes);
    fieldset = $('<fieldset>');
    _ref = this.model.configure_attributes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      attribute_clean = _ref[_i];
      attribute = _.clone(attribute_clean);
      if (!attribute.readonly && (!this.required || this.required && attribute[this.required])) {
        this.attribute_count = this.attribute_count + 1;
        item = this.formGenItem(attribute, this.model.className, fieldset);
        item.appendTo(fieldset);
        if (attribute.type === 'password') {
          if (this.params) {
            if (attribute.name in this.params) {
              attribute.value = this.params[attribute.name];
            }
          }
          if (!attribute.single) {
            attribute.display = attribute.display + ' (confirm)';
            attribute.name = attribute.name + '_confirm';
            item = this.formGenItem(attribute, this.model.className, fieldset);
            item.appendTo(fieldset);
          }
        }
      }
    }
    return fieldset;
  };

  /*
  
  # input text field with max. 100 size
  attribute_config = {
    name:     'subject'
    display:  'Subject'
    tag:      'input'
    type:     'text'
    limit:    100
    null:     false
    default:  defaults['subject']
    class:    'span7'
  }
  
  # colection as relation with auto completion
  attribute_config = {
    name:           'customer_id'
    display:        'Customer'
    tag:            'autocompletion'
    # auto completion params, endpoints, ui,...
    type:           'text'
    limit:          100
    null:           false
    relation:       'User'
    autocapitalize: false
    help:           'Select the customer of the Ticket or create one.'
    link:           '<a href="" class="customer_new">&raquo;</a>'
    callback:       @userInfo
    class:          'span7'
  }
  
  # colection as relation
  attribute_config = {
    name:       'ticket_priority_id'
    display:    'Priority'
    tag:        'select'
    multiple:   false
    null:       false
    relation:   'TicketPriority'
    default:    defaults['ticket_priority_id']
    translate:  true
    class:      'medium'
  }
  
  
  # colection as options
  attribute_config = {
    name:       'ticket_priority_id'
    display:    'Priority'
    tag:        'select'
    multiple:   false
    null:       false
    options: [
      {
        value:    5
        name:     'very hight'
        selected: false
        disable:  false
      },
      {
        value:    3
        name:     'normal'
        selected: true
        disable:  false
      },
    ]
    default:    3
    translate:  true
    class:      'medium'
  }
  */


  ControllerForm.prototype.formGenItem = function(attribute_config, classname, form) {
    var a, action, addShownAttribute, attribute, b, counter, fileUploaderId, fullItem, i, input, item, itemAdd, itemClass, itemRemote, key, keysub, list, loopData, parts, pearItem, record, select, show, timezone_diff, timezone_value, timezones, u, ui, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4,
      _this = this;

    attribute = _.clone(attribute_config);
    attribute.id = classname + '_' + attribute.name;
    if (this.autofocus && this.attribute_count === 1) {
      attribute.autofocus = 'autofocus';
    }
    if (!attribute["null"]) {
      attribute.required = 'required';
    } else {
      attribute.required = '';
    }
    if (attribute.multiple) {
      attribute.multiple = 'multiple';
    } else {
      attribute.multiple = '';
    }
    if (attribute.autocapitalize === void 0 || attribute.autocapitalize) {
      attribute.autocapitalize = '';
    } else {
      attribute.autocapitalize = 'autocapitalize="off"';
    }
    if (attribute.autocomplete === void 0) {
      attribute.autocomplete = '';
    } else {
      attribute.autocomplete = 'autocomplete="' + attribute.autocomplete + '"';
    }
    if (attribute.value === void 0 && 'default' in attribute) {
      attribute.value = attribute["default"];
    }
    if (this.params) {
      parts = attribute.name.split('::');
      if (parts[0] && parts[1]) {
        if (this.params[parts[0]] && this.params[parts[0]][parts[1]]) {
          attribute.value = this.params[parts[0]][parts[1]];
        }
      }
      if (attribute.name in this.params) {
        attribute.value = this.params[attribute.name];
      }
    }
    App.Log.debug('ControllerForm', 'formGenItem-before', attribute);
    this._getConfigOptionList(attribute);
    this._getRelationOptionList(attribute);
    this._addNullOption(attribute);
    this._sortOptions(attribute);
    this._selectedOptions(attribute);
    this._disabledOptions(attribute);
    this._filterOption(attribute);
    if (attribute.tag === 'boolean') {
      if (_.isEmpty(attribute.options)) {
        attribute.options = [
          {
            name: 'active',
            value: true
          }, {
            name: 'inactive',
            value: false
          }
        ];
      }
      _ref = attribute.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        record = _ref[_i];
        record.value = '{boolean}::' + record.value;
      }
      _ref1 = attribute.options;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        record = _ref1[_j];
        if (record.value === '{boolean}::' + attribute.value) {
          record.selected = 'selected';
        }
      }
      item = $(App.view('generic/select')({
        attribute: attribute
      }));
    } else if (attribute.tag === 'select') {
      item = $(App.view('generic/select')({
        attribute: attribute
      }));
    } else if (attribute.tag === 'timezone') {
      attribute.options = [];
      timezones = App.Config.get('timezones');
      for (timezone_value in timezones) {
        timezone_diff = timezones[timezone_value];
        if (timezone_diff > 0) {
          timezone_diff = '+' + timezone_diff;
        }
        item = {
          name: "" + timezone_value + " (GMT" + timezone_diff + ")",
          value: timezone_value
        };
        attribute.options.push(item);
      }
      _ref2 = attribute.options;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        record = _ref2[_k];
        if (record.value === attribute.value) {
          record.selected = 'selected';
        }
      }
      item = $(App.view('generic/select')({
        attribute: attribute
      }));
    } else if (attribute.tag === 'input_select') {
      item = $('<div class="input_select"></div>');
      loopData = {};
      if (this.params && this.params[attribute.name]) {
        loopData = this.params[attribute.name];
      }
      loopData[''] = '';
      counter = 0;
      for (key in loopData) {
        counter = +1;
        select = _.clone(attribute);
        input = _.clone(attribute);
        select.id = '';
        input.id = '';
        select.name = '{input_select}::' + select.name;
        input.name = '{input_select}::' + input.name;
        for (keysub in attribute.select) {
          select[keysub] = attribute.select[keysub];
        }
        for (keysub in attribute.input) {
          input[keysub] = attribute.input[keysub];
        }
        itemClass = '';
        if (key === '') {
          itemClass = 'hide';
          select['nulloption'] = true;
        }
        select.value = key;
        input.value = loopData[key];
        this._getConfigOptionList(select);
        this._getRelationOptionList(select);
        this._addNullOption(select);
        this._sortOptions(select);
        this._selectedOptions(select);
        pearItem = $("<div class=" + itemClass + "></div>");
        pearItem.append($(App.view('generic/select')({
          attribute: select
        })));
        pearItem.append($(App.view('generic/input')({
          attribute: input
        })));
        itemRemote = $('<a href="#" class="input_select_remove icon-minus"></a>');
        itemRemote.bind('click', function(e) {
          e.preventDefault();
          return $(this).parent().remove();
        });
        pearItem.append(itemRemote);
        item.append(pearItem);
        if (key === '') {
          itemAdd = $('<div class="add"><a href="#" class="icon-plus"></a></div>');
          itemAdd.bind('click', function(e) {
            var newElement;

            e.preventDefault();
            newElement = $(this).prev().clone();
            newElement.removeClass('hide');
            newElement.find('.input_select_remove').bind('click', function(e) {
              e.preventDefault();
              return $(this).parent().remove();
            });
            return $(this).parent().find('.add').before(newElement);
          });
          item.append(itemAdd);
        }
      }
    } else if (attribute.tag === 'checkbox') {
      item = $(App.view('generic/checkbox')({
        attribute: attribute
      }));
    } else if (attribute.tag === 'radio') {
      item = App.view('generic/radio')({
        attribute: attribute
      });
    } else if (attribute.tag === 'textarea') {
      item = $(App.view('generic/textarea')({
        attribute: attribute
      }));
      if (attribute.upload) {
        fileUploaderId = 'file-uploader-' + new Date().getTime() + '-' + Math.floor(Math.random() * 99999);
        item = $(App.view('generic/textarea')({
          attribute: attribute
        }) + '<div class="file-uploader ' + attribute["class"] + '" id="' + fileUploaderId + '"></div>');
        u = function() {
          return _this.el.find('#' + fileUploaderId).fineUploader({
            request: {
              endpoint: 'api/ticket_attachment_new',
              params: {
                form_id: _this.form_id
              }
            },
            text: {
              uploadButton: '<i class="icon-attachment"></i>'
            },
            template: '<div class="qq-uploader">' + '<pre class="btn qq-upload-icon qq-upload-drop-area"><span>{dragZoneText}</span></pre>' + '<div class="btn qq-upload-icon qq-upload-button pull-right" style="">{uploadButtonText}</div>' + '<ul class="qq-upload-list span5" style="margin-top: 10px;"></ul>' + '</div>',
            fileTemplate: '<li>' + '<div class="qq-progress-bar"></div>' + '<span class="qq-upload-spinner"></span>' + '<span class="qq-upload-finished"></span>' + '<span class="qq-upload-file"></span>' + '<span class="qq-upload-size"></span>' + '<a class="qq-upload-cancel" href="#">{cancelButtonText}</a>' + '<a class="qq-upload-retry" href="#">{retryButtonText}</a>' + '<a class="qq-upload-delete" href="#">X</a>' + '<span class="qq-upload-status-text">{statusText}</span>' + '</li>',
            classes: {
              success: '',
              fail: ''
            },
            debug: false
          });
        };
        this.delay(u, 80);
      }
    } else if (attribute.tag === 'tag') {
      item = $(App.view('generic/input')({
        attribute: attribute
      }));
      a = function() {
        var h, onAddTag, onRemoveTag, siteUpdate, w;

        siteUpdate = function(reorder) {
          var container, height;

          container = document.getElementById(attribute.id + "_tagsinput");
          if (reorder) {
            $('#' + attribute.id + "_tagsinput").height(20);
          }
          height = container.scrollHeight;
          return $('#' + attribute.id + "_tagsinput").height(height - 16);
        };
        onAddTag = function() {
          return siteUpdate();
        };
        onRemoveTag = function() {
          return siteUpdate(true);
        };
        $('#' + attribute.id + '_tagsinput').remove();
        w = $('#' + attribute.id).width();
        h = $('#' + attribute.id).height();
        $('#' + attribute.id).tagsInput({
          width: w + 'px',
          onAddTag: onAddTag,
          onRemoveTag: onRemoveTag
        });
        siteUpdate(true);
        return App.Event.bind('ui:rerender:content', function() {
          return siteUpdate(true);
        });
      };
      this.delay(a, 80);
    } else if (attribute.tag === 'autocompletion') {
      item = $(App.view('generic/autocompletion')({
        attribute: attribute
      }));
      a = function() {
        var b;

        _this.local_attribute = '#' + attribute.id;
        _this.local_attribute_full = '#' + attribute.id + '_autocompletion';
        _this.callback = attribute.callback;
        b = function(event, key) {
          var params;

          $(_this.local_attribute).val(key);
          if (_this.callback) {
            params = App.ControllerForm.params(form);
            return _this.callback(params);
          }
        };
        /*
        $(@local_attribute_full).tagsInput(
          autocomplete_url: '/users/search',
          height: '30px',
          width: '530px',
          auto: {
            source: '/users/search',
            minLength: 2,
            select: ( event, ui ) =>
              @log 'notice', 'selected', event, ui
              b(event, ui.item.id)
          }
        )
        */

        return $(_this.local_attribute_full).autocomplete({
          source: 'api/users/search',
          minLength: 2,
          select: function(event, ui) {
            return b(event, ui.item.id);
          }
        });
      };
      this.delay(a, 180);
    } else if (attribute.tag === 'working_hour') {
      if (!attribute.value) {
        attribute.value = {};
      }
      item = $(App.view('generic/working_hour')({
        attribute: attribute
      }));
    } else if (attribute.tag === 'time_before_last') {
      if (!attribute.value) {
        attribute.value = {};
      }
      item = $(App.view('generic/time_before_last')({
        attribute: attribute
      }));
      item.find("[name=\"" + attribute.name + "::direction\"]").find("option[value=\"" + attribute.value.direction + "\"]").attr('selected', 'selected');
      item.find("[name=\"" + attribute.name + "::count\"]").find("option[value=\"" + attribute.value.count + "\"]").attr('selected', 'selected');
      item.find("[name=\"" + attribute.name + "::area\"]").find("option[value=\"" + attribute.value.area + "\"]").attr('selected', 'selected');
    } else if (attribute.tag === 'ticket_attribute_selection') {
      item = $(App.view('generic/ticket_attribute_selection')({
        attribute: attribute
      }));
      addShownAttribute = function(key, value) {
        var display, itemSub, name, type;

        console.log('addShownAttribute', key, value);
        parts = key.split(/::/);
        key = parts[0];
        type = parts[1];
        if (key === 'tickets.number') {
          attribute_config = {
            name: attribute.name + '::tickets.number',
            display: 'Number',
            tag: 'input',
            type: 'text',
            "null": false,
            value: value,
            "class": 'medium',
            remove: true
          };
        } else if (key === 'tickets.title') {
          attribute_config = {
            name: attribute.name + '::tickets.title',
            display: 'Title',
            tag: 'input',
            type: 'text',
            "null": false,
            value: value,
            "class": 'medium',
            remove: true
          };
        } else if (key === 'tickets.group_id') {
          attribute_config = {
            name: attribute.name + '::tickets.group_id',
            display: 'Group',
            tag: 'select',
            multiple: true,
            "null": false,
            nulloption: false,
            relation: 'Group',
            value: value,
            "class": 'medium',
            remove: true
          };
        } else if (key === 'tickets.owner_id' || key === 'tickets.customer_id') {
          display = 'Owner';
          name = 'owner_id';
          if (key === 'customer_id') {
            display = 'Customer';
            name = 'customer_id';
          }
          attribute_config = {
            name: attribute.name + '::tickets.' + name,
            display: display,
            tag: 'select',
            multiple: true,
            "null": false,
            nulloption: false,
            relation: 'User',
            value: value || null,
            "class": 'medium',
            remove: true,
            filter: function(all, type) {
              if (type !== 'collection') {
                return all;
              }
              all = _.filter(all, function(item) {
                if (item.id === 1) {
                  return;
                }
                return item;
              });
              all.unshift({
                id: '',
                name: '--'
              });
              all.unshift({
                id: 1,
                name: '*** not set ***'
              });
              all.unshift({
                id: 'current_user.id',
                name: '*** current user ***'
              });
              return all;
            }
          };
        } else if (key === 'tickets.organization_id') {
          attribute_config = {
            name: attribute.name + '::tickets.organization_id',
            display: 'Organization',
            tag: 'select',
            multiple: true,
            "null": false,
            nulloption: false,
            relation: 'Organization',
            value: value || null,
            "class": 'medium',
            remove: true,
            filter: function(all, type) {
              if (type !== 'collection') {
                return all;
              }
              all.unshift({
                id: '',
                name: '--'
              });
              all.unshift({
                id: 'current_user.organization_id',
                name: '*** organization of current user ***'
              });
              return all;
            }
          };
        } else if (key === 'tickets.ticket_state_id') {
          attribute_config = {
            name: attribute.name + '::tickets.ticket_state_id',
            display: 'State',
            tag: 'select',
            multiple: true,
            "null": false,
            nulloption: false,
            relation: 'TicketState',
            value: value,
            translate: true,
            "class": 'medium',
            remove: true
          };
        } else if (key === 'tickets.ticket_priority_id') {
          attribute_config = {
            name: attribute.name + '::tickets.ticket_priority_id',
            display: 'Priority',
            tag: 'select',
            multiple: true,
            "null": false,
            nulloption: false,
            relation: 'TicketPriority',
            value: value,
            translate: true,
            "class": 'medium',
            remove: true
          };
        } else if (key === 'tickets.created_at' && (type === '<>' || value.count)) {
          attribute_config = {
            name: attribute.name + '::tickets.created_at',
            display: 'Created (before / last)',
            tag: 'time_before_last',
            value: value,
            translate: true,
            "class": 'medium',
            remove: true
          };
        } else if (key === 'tickets.created_at' && (type === '><' || 0)) {
          attribute_config = {
            name: attribute.name + '::tickets.created_at',
            display: 'Created (between)',
            tag: 'time_range',
            value: value,
            translate: true,
            "class": 'medium',
            remove: true
          };
        } else if (key === 'tickets.close_time' && (type === '<>' || value.count)) {
          attribute_config = {
            name: attribute.name + '::tickets.close_time',
            display: 'Closed (before / last)',
            tag: 'time_before_last',
            value: value,
            translate: true,
            "class": 'medium',
            remove: true
          };
        } else if (key === 'tickets.close_time' && (type === '><' || 0)) {
          attribute_config = {
            name: attribute.name + '::tickets.close_time',
            display: 'Closed (between)',
            tag: 'time_range',
            value: value,
            translate: true,
            "class": 'medium',
            remove: true
          };
        } else if (key === 'tickets.updated_at' && (type === '<>' || value.count)) {
          attribute_config = {
            name: attribute.name + '::tickets.updated_at',
            display: 'Updated (before / last)',
            tag: 'time_before_last',
            value: value,
            translate: true,
            "class": 'medium',
            remove: true
          };
        } else if (key === 'tickets.updated_at' && (type === '><' || 0)) {
          attribute_config = {
            name: attribute.name + '::tickets.updated_at',
            display: 'Updated (between)',
            tag: 'time_range',
            value: value,
            translate: true,
            "class": 'medium',
            remove: true
          };
        } else if (key === 'tickets.escalation_time' && (type === '<>' || value.count)) {
          attribute_config = {
            name: attribute.name + '::tickets.escalation_time',
            display: 'Escalation (before / last)',
            tag: 'time_before_last',
            value: value,
            translate: true,
            "class": 'medium',
            remove: true
          };
        } else if (key === 'tickets.escalation_time' && (type === '><' || 0)) {
          attribute_config = {
            name: attribute.name + '::tickets.escalation_time',
            display: 'Escatlation (between)',
            tag: 'time_range',
            value: value,
            translate: true,
            "class": 'medium',
            remove: true
          };
        } else {
          attribute_config = {
            name: attribute.name + '::' + key,
            display: 'FIXME!',
            tag: 'input',
            type: 'text',
            value: value,
            "class": 'medium',
            remove: true
          };
        }
        itemSub = _this.formGenItem(attribute_config);
        itemSub.find('.icon-minus').bind('click', function(e) {
          e.preventDefault();
          return $(this).parent().parent().parent().remove();
        });
        return item.find('.ticket_attribute_item').append(itemSub);
      };
      show = [];
      if (attribute.value) {
        _ref3 = attribute.value;
        for (key in _ref3) {
          value = _ref3[key];
          addShownAttribute(key, value);
        }
      }
      attribute_config = {
        name: 'ticket_attribute_list',
        display: 'Add Attribute',
        tag: 'select',
        multiple: false,
        "null": false,
        options: [
          {
            value: '',
            name: '-- Ticket --',
            selected: false,
            disable: true
          }, {
            value: 'tickets.group_id',
            name: 'Group',
            selected: false,
            disable: false
          }, {
            value: 'tickets.ticket_state_id',
            name: 'State',
            selected: false,
            disable: false
          }, {
            value: 'tickets.ticket_priority_id',
            name: 'Priority',
            selected: true,
            disable: false
          }, {
            value: 'tickets.owner_id',
            name: 'Owner',
            selected: true,
            disable: false
          }, {
            value: 'tickets.customer_id',
            name: 'Customer',
            selected: true,
            disable: false
          }, {
            value: 'tickets.organization_id',
            name: 'Organization',
            selected: true,
            disable: false
          }, {
            value: 'tickets.created_at::<>',
            name: 'Created (before/last)',
            selected: true,
            disable: false
          }, {
            value: 'tickets.created_at::><',
            name: 'Created (between)',
            selected: true,
            disable: false
          }, {
            value: 'tickets.close_time::<>',
            name: 'Closed (before/last)',
            selected: true,
            disable: false
          }, {
            value: 'tickets.close_time::><',
            name: 'Closed (between)',
            selected: true,
            disable: false
          }, {
            value: 'tickets.updated_at::<>',
            name: 'Updated (before/last)',
            selected: true,
            disable: false
          }, {
            value: 'tickets.updated_at::><',
            name: 'Updated (between)',
            selected: true,
            disable: false
          }, {
            value: 'tickets.escalation_time::<>',
            name: 'Escalation (before/last)',
            selected: true,
            disable: false
          }, {
            value: 'tickets.escalation_time::><',
            name: 'Escalation (between)',
            selected: true,
            disable: false
          }
        ],
        "default": '',
        translate: true,
        "class": 'medium',
        add: true
      };
      list = this.formGenItem(attribute_config);
      list.find('.icon-plus').bind('click', function(e) {
        e.preventDefault();
        value = $(e.target).parents().find('[name=ticket_attribute_list]').val();
        return addShownAttribute(value, '');
      });
      item.find('.ticket_attribute_list').prepend(list);
    } else {
      item = $(App.view('generic/input')({
        attribute: attribute
      }));
    }
    if (attribute.onchange) {
      if (typeof attribute.onchange === 'function') {
        attribute.onchange(attribute);
      } else {
        for (i in attribute.onchange) {
          a = i.split(/__/);
          if (a[1]) {
            if (a[0] === attribute.name) {
              this.attribute = attribute;
              this.classname = classname;
              this.attributes_clean = attributes_clean;
              this.change = a;
              b = function() {
                var attributes_clean, change, ui;

                attribute = _this.attribute;
                change = _this.change;
                classname = _this.classname;
                attributes_clean = _this.attributes_clean;
                ui = _this;
                return $('#' + _this.attribute.id).bind('change', function() {
                  ui.log('change', this, attribute, change);
                  ui.log(change[0] + ' has changed - changing ' + change[1]);
                  item = $(ui.formGenItem(attribute, classname, attributes_clean));
                  return ui.log(item, classname);
                });
              };
              this.delay(b, 100);
            }
          }
        }
      }
    }
    ui = this;
    item.bind('change', function() {
      var changedAttribute, newElement, newListAttribute, newListAttributes, params, toChangeAttribute, _l, _len3, _ref4, _results;

      if (ui.form_data) {
        params = App.ControllerForm.params(this);
        _results = [];
        for (i in ui.form_data) {
          a = i.split(/__/);
          if (a[1] && a[0] === attribute.name) {
            newListAttribute = i;
            changedAttribute = a[0];
            toChangeAttribute = a[1];
            newListAttributes = ui['form_data'][newListAttribute][params['group_id']];
            _ref4 = ui.model.configure_attributes;
            for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
              item = _ref4[_l];
              if (item.name === toChangeAttribute) {
                item.display = false;
                item['filter'][toChangeAttribute] = newListAttributes;
                if (params[changedAttribute]) {
                  item["default"] = params[toChangeAttribute];
                }
                if (!item["default"]) {
                  delete item['default'];
                }
                newElement = ui.formGenItem(item, classname, form);
              }
            }
            _results.push(form.find('[name="' + toChangeAttribute + '"]').replaceWith(newElement));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    });
    if (this.dependency) {
      _ref4 = this.dependency;
      for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
        action = _ref4[_l];
        if (action.bind && action.bind.name === attribute.name) {
          ui = this;
          (function(action, attribute) {
            return item.bind('change', function() {
              var data;

              value = $(this).val();
              if (action.bind.relation) {
                data = App[action.bind.relation].find(value);
                value = data.name;
              }
              if (_.contains(action.bind.value, value)) {
                if (action.change.action === 'hide') {
                  return ui._hide(action.change.name);
                } else {
                  return ui._show(action.change.name);
                }
              }
            });
          })(action, attribute);
        }
      }
    }
    if (!attribute.display) {
      return item;
    } else {
      fullItem = $(App.view('generic/attribute')({
        attribute: attribute,
        item: ''
      }));
      fullItem.find('.controls').prepend(item);
      if (attribute.hide) {
        this._hide(attribute.name, fullItem);
      }
      return fullItem;
    }
  };

  ControllerForm.prototype._show = function(name, el) {
    var key, _i, _len, _results;

    if (el == null) {
      el = this.el;
    }
    if (!_.isArray(name)) {
      name = [name];
    }
    _results = [];
    for (_i = 0, _len = name.length; _i < _len; _i++) {
      key = name[_i];
      el.find('[name="' + key + '"]').parents('.control-group').removeClass('hide');
      _results.push(el.find('[name="' + key + '"]').removeClass('is-hidden'));
    }
    return _results;
  };

  ControllerForm.prototype._hide = function(name, el) {
    var key, _i, _len, _results;

    if (el == null) {
      el = this.el;
    }
    if (!_.isArray(name)) {
      name = [name];
    }
    _results = [];
    for (_i = 0, _len = name.length; _i < _len; _i++) {
      key = name[_i];
      el.find('[name="' + key + '"]').parents('.control-group').addClass('hide');
      _results.push(el.find('[name="' + key + '"]').addClass('is-hidden'));
    }
    return _results;
  };

  ControllerForm.prototype._sortOptions = function(attribute) {
    var i, ii, options_by_name, options_new, options_new_used, vv, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;

    if (!attribute.options) {
      return;
    }
    if (_.isArray(attribute.options)) {
      return;
    }
    options_by_name = [];
    _ref = attribute.options;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      options_by_name.push(i['name'].toString().toLowerCase());
    }
    options_by_name = options_by_name.sort();
    options_new = [];
    options_new_used = {};
    for (_j = 0, _len1 = options_by_name.length; _j < _len1; _j++) {
      i = options_by_name[_j];
      _ref1 = attribute.options;
      for (vv = _k = 0, _len2 = _ref1.length; _k < _len2; vv = ++_k) {
        ii = _ref1[vv];
        if (!options_new_used[ii['value']] && i.toString().toLowerCase() === ii['name'].toString().toLowerCase()) {
          options_new_used[ii['value']] = 1;
          options_new.push(ii);
        }
      }
    }
    return attribute.options = options_new;
  };

  ControllerForm.prototype._addNullOption = function(attribute) {
    if (!attribute.options) {
      return;
    }
    if (!attribute.nulloption) {
      return;
    }
    if (_.isArray(attribute.options)) {
      return attribute.options.unshift({
        name: '-',
        value: ''
      });
    } else {
      return attribute.options[''] = '-';
    }
  };

  ControllerForm.prototype._getConfigOptionList = function(attribute) {
    var key, name_new, row, selection, value, _i, _len, _results, _results1;

    if (!attribute.options) {
      return;
    }
    selection = attribute.options;
    attribute.options = [];
    if (_.isArray(selection)) {
      _results = [];
      for (_i = 0, _len = selection.length; _i < _len; _i++) {
        row = selection[_i];
        if (attribute.translate) {
          row.name = App.i18n.translateInline(row.name);
        }
        _results.push(attribute.options.push(row));
      }
      return _results;
    } else {
      _results1 = [];
      for (key in selection) {
        value = selection[key];
        name_new = value;
        if (attribute.translate) {
          name_new = App.i18n.translateInline(name_new);
        }
        _results1.push(attribute.options.push({
          name: name_new,
          value: key
        }));
      }
      return _results1;
    }
  };

  ControllerForm.prototype._getRelationOptionList = function(attribute) {
    var all, filter, key, list, record, _i, _j, _len, _len1, _ref;

    if (!attribute.relation) {
      return;
    }
    if (!App[attribute.relation]) {
      return;
    }
    attribute.options = [];
    list = [];
    if (attribute.filter) {
      App.Log.debug('ControllerForm', '_getRelationOptionList:filter', attribute.filter);
      if (typeof attribute.filter === 'function') {
        App.Log.debug('ControllerForm', '_getRelationOptionList:filter-function');
        all = App.Collection.all({
          type: attribute.relation,
          sortBy: attribute.sortBy || 'name'
        });
        list = attribute.filter(all, 'collection');
      } else if (attribute.filter[attribute.name]) {
        filter = attribute.filter[attribute.name];
        App.Log.debug('ControllerForm', '_getRelationOptionList:filter-data', filter);
        _ref = App.Collection.all({
          type: attribute.relation,
          sortBy: attribute.sortBy || 'name'
        });
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          record = _ref[_i];
          for (_j = 0, _len1 = filter.length; _j < _len1; _j++) {
            key = filter[_j];
            if (record['id'] === key) {
              list.push(record);
            }
          }
        }
      } else {
        App.Log.debug('ControllerForm', '_getRelationOptionList:filter-data no filter matched');
        list = App.Collection.all({
          type: attribute.relation,
          sortBy: attribute.sortBy || 'name'
        });
      }
    } else {
      App.Log.debug('ControllerForm', '_getRelationOptionList:filter-no filter defined');
      list = App.Collection.all({
        type: attribute.relation,
        sortBy: attribute.sortBy || 'name'
      });
    }
    App.Log.debug('ControllerForm', '_getRelationOptionList', attribute, list);
    return this._buildOptionList(list, attribute);
  };

  ControllerForm.prototype._buildOptionList = function(list, attribute) {
    var item, name_new, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      item = list[_i];
      if (item.active || !('active' in item)) {
        name_new = '?';
        if (item.displayName) {
          name_new = item.displayName();
        } else if (item.name) {
          name_new = item.name;
        }
        if (attribute.translate) {
          name_new = App.i18n.translateInline(name_new);
        }
        _results.push(attribute.options.push({
          name: name_new,
          value: item.id,
          note: item.note
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  ControllerForm.prototype._filterOption = function(attribute) {
    if (!attribute.filter) {
      return;
    }
    if (!attribute.options) {
      return;
    }
    if (typeof attribute.filter !== 'function') {
      return;
    }
    App.Log.debug('ControllerForm', '_filterOption:filter-function');
    return attribute.options = attribute.filter(attribute.options, attribute);
  };

  ControllerForm.prototype._selectedOptions = function(attribute) {
    var check, record, value, _i, _j, _len, _len1, _ref, _ref1, _results;

    if (!attribute.options) {
      return;
    }
    check = function(value, record) {
      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
        if (record.value.toString() === value.toString() || record.name.toString() === value.toString()) {
          record.selected = 'selected';
          return record.checked = 'checked';
        }
      } else if ((value && record.value && _.include(value, record.value)) || (value && record.name && _.include(value, record.name))) {
        record.selected = 'selected';
        return record.checked = 'checked';
      }
    };
    _ref = attribute.options;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      record = _ref[_i];
      if (_.isArray(attribute.value)) {
        _ref1 = attribute.value;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          value = _ref1[_j];
          check(value, record);
        }
      }
      if (typeof attribute.value === 'string' || typeof attribute.value === 'number' || typeof attribute.value === 'boolean') {
        _results.push(check(attribute.value, record));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  ControllerForm.prototype._disabledOptions = function(attribute) {
    var record, _i, _len, _ref, _results;

    if (!attribute.options) {
      return;
    }
    if (!_.isArray(attribute.options)) {
      return;
    }
    _ref = attribute.options;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      record = _ref[_i];
      if (record.disable === true) {
        _results.push(record.disabled = 'disabled');
      } else {
        _results.push(record.disabled = '');
      }
    }
    return _results;
  };

  ControllerForm.prototype.validate = function(params) {
    return App.Model.validate({
      model: this.model,
      params: params
    });
  };

  ControllerForm.params = function(form) {
    var array, attributeType, inputSelectData, inputSelectObject, key, name, param, parts, x, _i, _j, _len, _ref;

    param = {};
    if (typeof form !== 'function') {
      form = $(form);
    }
    if (form.children()[0]) {
      form = form.children().parents('form');
    } else if (form.parents('form')[0]) {
      form = form.parents('form');
    } else if (form.parents().find('form')[0]) {
      form = form.parents().find('form');
    } else {
      App.Log.error('ControllerForm', 'no form found!', form);
    }
    array = form.serializeArray();
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      key = array[_i];
      if (form.find('[name="' + key.name + '"]').hasClass('is-hidden')) {
        continue;
      }
      if (param[key.name]) {
        if (typeof param[key.name] === 'string') {
          param[key.name] = [param[key.name], key.value];
        } else {
          param[key.name].push(key.value);
        }
      } else {
        attributeType = key.value.split('::');
        if (attributeType[0] === '{boolean}') {
          if (attributeType[1] === 'true') {
            key.value = true;
          } else {
            key.value = false;
          }
        }
        param[key.name] = key.value;
      }
    }
    inputSelectObject = {};
    for (key in param) {
      parts = key.split('::');
      if (parts[0] && parts[1] && !parts[2]) {
        if (!inputSelectObject[parts[0]]) {
          inputSelectObject[parts[0]] = {};
        }
        inputSelectObject[parts[0]][parts[1]] = param[key];
        delete param[key];
      }
      if (parts[0] && parts[1] && parts[2]) {
        if (!inputSelectObject[parts[0]]) {
          inputSelectObject[parts[0]] = {};
        }
        if (!inputSelectObject[parts[0]][parts[1]]) {
          inputSelectObject[parts[0]][parts[1]] = {};
        }
        inputSelectObject[parts[0]][parts[1]][parts[2]] = param[key];
        delete param[key];
      }
    }
    for (key in param) {
      attributeType = key.split('::');
      name = attributeType[1];
      if (attributeType[0] === '{input_select}' && !param[name]) {
        inputSelectData = param[key];
        inputSelectObject[name] = {};
        for (x = _j = 0, _ref = inputSelectData.length; _j <= _ref; x = _j += 2) {
          if (inputSelectData[x]) {
            inputSelectObject[name][inputSelectData[x]] = inputSelectData[x + 1];
          }
        }
        delete param[key];
      }
    }
    for (key in inputSelectObject) {
      param[key] = inputSelectObject[key];
    }
    return param;
  };

  ControllerForm.formId = function() {
    var formId;

    formId = new Date().getTime() + Math.floor(Math.random() * 99999);
    return formId.toString().substr(formId.toString().length - 9, 9);
  };

  ControllerForm.disable = function(form) {
    App.Log.notice('ControllerForm', 'disable...', $(form.target).parent());
    $(form.target).parent().find('button').attr('disabled', true);
    $(form.target).parent().find('[type="submit"]').attr('disabled', true);
    return $(form.target).parent().find('[type="reset"]').attr('disabled', true);
  };

  ControllerForm.enable = function(form) {
    App.Log.notice('ControllerForm', 'enable...', $(form.target).parent());
    $(form.target).parent().find('button').attr('disabled', false);
    $(form.target).parent().find('[type="submit"]').attr('disabled', false);
    return $(form.target).parent().find('[type="reset"]').attr('disabled', false);
  };

  ControllerForm.validate = function(data) {
    var key, msg, _ref;

    $(data.form).parents().find('.error').removeClass('error');
    $(data.form).parents().find('.help-inline').html('');
    _ref = data.errors;
    for (key in _ref) {
      msg = _ref[key];
      $(data.form).parents().find('[name*="' + key + '"]').parents('div .control-group').addClass('error');
      $(data.form).parents().find('[name*="' + key + '"]').parent().find('.help-inline').html(msg);
    }
    return $(data.form).parents().find('.error').find('input, textarea').first().focus();
  };

  return ControllerForm;

})(App.Controller);
