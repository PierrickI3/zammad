// Generated by CoffeeScript 1.6.2
var TicketCreateRouter, UserNew,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

App.TicketCreate = (function(_super) {
  __extends(TicketCreate, _super);

  TicketCreate.prototype.events = {
    'click .customer_new': 'userNew',
    'submit form': 'submit',
    'click .submit': 'submit',
    'click .cancel': 'cancel',
    'click .qq-upload-delete': 'deleteTempFile'
  };

  function TicketCreate(params) {
    this.userNew = __bind(this.userNew, this);
    this.localUserInfo = __bind(this.localUserInfo, this);
    this.autosave = __bind(this.autosave, this);
    this.release = __bind(this.release, this);
    this.changed = __bind(this.changed, this);
    this.activate = __bind(this.activate, this);
    this.url = __bind(this.url, this);
    this.meta = __bind(this.meta, this);
    var article_sender_type_map, default_type,
      _this = this;

    TicketCreate.__super__.constructor.apply(this, arguments);
    if (!this.authenticate()) {
      return;
    }
    this.form_id = App.ControllerForm.formId();
    this.edit_form = void 0;
    default_type = 'call_inbound';
    if (!this.type) {
      this.type = default_type;
    }
    article_sender_type_map = {
      call_inbound: {
        sender: 'Customer',
        article: 'phone',
        title: 'Call Inbound'
      },
      call_outbound: {
        sender: 'Agent',
        article: 'phone',
        title: 'Call Outbound'
      },
      email: {
        sender: 'Agent',
        article: 'email',
        title: 'Email'
      }
    };
    this.article_attributes = article_sender_type_map[this.type];
    if (!this.article_attributes) {
      this.navigate('#ticket_create/' + default_type);
    }
    this.navupdate('#ticket_create/' + this.type + '/id/' + this.id);
    this.fetch(params);
    App.Event.bind('ticket_create_rerender', function(defaults) {
      _this.log('notice', 'error', defaults);
      return _this.render(defaults);
    });
    this.delay(function() {
      return _this.autosave();
    }, 5000);
  }

  TicketCreate.prototype.meta = function() {
    var meta, subject, text;

    text = App.i18n.translateInline(this.article_attributes['title']);
    subject = this.el.find('[name=subject]').val();
    if (subject) {
      text = "" + text + ": " + subject;
    }
    return meta = {
      url: this.url(),
      head: text,
      title: text,
      id: this.type
    };
  };

  TicketCreate.prototype.url = function() {
    return '#ticket_create/' + this.type + '/id/' + this.id;
  };

  TicketCreate.prototype.activate = function() {
    return this.navupdate('#');
  };

  TicketCreate.prototype.changed = function() {
    var diff, formCurrent;

    formCurrent = this.formParam(this.el.find('.ticket-create'));
    diff = difference(this.formDefault, formCurrent);
    if (!diff || _.isEmpty(diff)) {
      return false;
    }
    return true;
  };

  TicketCreate.prototype.release = function() {
    this.el.remove();
    return this.clearInterval(this.id, this.auto_save_key);
  };

  TicketCreate.prototype.autosave = function() {
    var update,
      _this = this;

    this.auto_save_key = 'create' + this.type + this.id;
    update = function() {
      var data, diff;

      data = _this.formParam(_this.el.find('.ticket-create'));
      diff = difference(_this.autosaveLast, data);
      if (!_this.autosaveLast || (diff && !_.isEmpty(diff))) {
        _this.autosaveLast = data;
        _this.log('notice', 'form hash changed', diff, data);
        return App.TaskManager.update(_this.task_key, {
          'state': data
        });
      }
    };
    return this.interval(update, 10000, this.id, this.auto_save_key);
  };

  TicketCreate.prototype.fetch = function(params) {
    var cache,
      _this = this;

    cache = App.Store.get('ticket_create_attributes');
    if (cache && !params.ticket_id && !params.article_id) {
      this.edit_form = cache.edit_form;
      App.Collection.load({
        type: 'User',
        data: cache.users
      });
      return this.render();
    } else {
      return App.Com.ajax({
        id: 'ticket_create',
        type: 'GET',
        url: 'api/ticket_create',
        data: {
          ticket_id: params.ticket_id,
          article_id: params.article_id
        },
        processData: true,
        success: function(data, status, xhr) {
          var a, t;

          App.Store.write('ticket_create_attributes', data);
          _this.edit_form = data.edit_form;
          App.Collection.load({
            type: 'User',
            data: data.users
          });
          if (data.ticket && data.articles) {
            App.Collection.load({
              type: 'Ticket',
              data: [data.ticket]
            });
            App.Collection.load({
              type: 'TicketArticle',
              data: data.articles || []
            });
            t = App.Collection.find('Ticket', params.ticket_id).attributes();
            a = App.Collection.find('TicketArticle', params.article_id);
            t.owner_id = 0;
            t.customer_id_autocompletion = a.from;
            t.subject = a.subject || t.title;
            t.body = a.body;
          }
          return _this.render({
            options: t
          });
        }
      });
    }
  };

  TicketCreate.prototype.render = function(template) {
    var configure_attributes, defaults;

    if (template == null) {
      template = {};
    }
    defaults = template['options'] || App.TaskManager.get(this.task_key).state || {};
    if (!('ticket_state_id' in defaults)) {
      defaults['ticket_state_id'] = App.Collection.findByAttribute('TicketState', 'name', 'open').id;
    }
    if (!('ticket_priority_id' in defaults)) {
      defaults['ticket_priority_id'] = App.Collection.findByAttribute('TicketPriority', 'name', '2 normal').id;
    }
    if ($('#create_customer_id').val()) {
      defaults['customer_id'] = $('#create_customer_id').val();
      defaults['customer_id_autocompletion'] = $('#create_customer_id_autocompletion').val();
    } else {

    }
    configure_attributes = [
      {
        name: 'customer_id',
        display: 'Customer',
        tag: 'autocompletion',
        type: 'text',
        limit: 200,
        "null": false,
        relation: 'User',
        "class": 'span7',
        autocapitalize: false,
        help: 'Select the customer of the Ticket or create one.',
        link: '<a href="" class="customer_new">&raquo;</a>',
        callback: this.localUserInfo
      }, {
        name: 'group_id',
        display: 'Group',
        tag: 'select',
        multiple: false,
        "null": false,
        filter: this.edit_form,
        nulloption: true,
        relation: 'Group',
        "default": defaults['group_id'],
        "class": 'span7'
      }, {
        name: 'owner_id',
        display: 'Owner',
        tag: 'select',
        multiple: false,
        "null": true,
        filter: this.edit_form,
        nulloption: true,
        relation: 'User',
        "default": defaults['owner_id'],
        "class": 'span7'
      }, {
        name: 'tags',
        display: 'Tags',
        tag: 'tag',
        type: 'text',
        "null": true,
        "default": defaults['tags'],
        "class": 'span7'
      }, {
        name: 'subject',
        display: 'Subject',
        tag: 'input',
        type: 'text',
        limit: 200,
        "null": false,
        "default": defaults['subject'],
        "class": 'span7'
      }, {
        name: 'body',
        display: 'Text',
        tag: 'textarea',
        rows: 8,
        "null": false,
        "default": defaults['body'],
        "class": 'span7',
        upload: true
      }, {
        name: 'ticket_state_id',
        display: 'State',
        tag: 'select',
        multiple: false,
        "null": false,
        filter: this.edit_form,
        relation: 'TicketState',
        "default": defaults['ticket_state_id'],
        translate: true,
        "class": 'medium'
      }, {
        name: 'ticket_priority_id',
        display: 'Priority',
        tag: 'select',
        multiple: false,
        "null": false,
        filter: this.edit_form,
        relation: 'TicketPriority',
        "default": defaults['ticket_priority_id'],
        translate: true,
        "class": 'medium'
      }
    ];
    this.html(App.view('agent_ticket_create')({
      head: 'New Ticket',
      title: this.article_attributes['title'],
      agent: this.isRole('Agent'),
      admin: this.isRole('Admin')
    }));
    new App.ControllerForm({
      el: this.el.find('.ticket_create'),
      form_id: this.form_id,
      model: {
        configure_attributes: configure_attributes,
        className: 'create_' + this.type + '_' + this.id
      },
      autofocus: true,
      form_data: this.edit_form
    });
    App.Event.trigger('task:render');
    this.el.find('textarea').elastic();
    this.el.find('textarea').trigger('change');
    if (defaults['customer_id']) {
      $('#create_customer_id').val(defaults['customer_id']);
      $('#create_customer_id_autocompletion').val(defaults['customer_id_autocompletion']);
      this.userInfo({
        user_id: defaults['customer_id']
      });
    }
    new App.TemplateUI({
      el: this.el.find('[data-id="ticket_template"]'),
      template_id: template['id']
    });
    this.formDefault = this.formParam(this.el.find('.ticket-create'));
    return new App.TextModuleUI({
      el: $('.ticket-create')
    });
  };

  TicketCreate.prototype.deleteTempFile = function() {
    return console.log('deleteTempFile');
  };

  TicketCreate.prototype.localUserInfo = function(params) {
    return this.userInfo({
      user_id: params.customer_id,
      el: this.el.find('[data-id="customer_info"]')
    });
  };

  TicketCreate.prototype.userNew = function(e) {
    e.preventDefault();
    return new UserNew({
      create_screen: this
    });
  };

  TicketCreate.prototype.cancel = function() {
    return this.navigate('#');
  };

  TicketCreate.prototype.submit = function(e) {
    var errors, group, object, params, sender, type, ui;

    e.preventDefault();
    params = this.formParam(e.target);
    if (!params.title) {
      params.title = params.subject;
    }
    object = new App.Ticket;
    sender = App.Collection.findByAttribute('TicketArticleSender', 'name', this.article_attributes['sender']);
    type = App.Collection.findByAttribute('TicketArticleType', 'name', this.article_attributes['article']);
    if (params.group_id) {
      group = App.Collection.find('Group', params.group_id);
    }
    if (sender.name === 'Customer') {
      params['article'] = {
        to: (group && group.name) || '',
        from: params.customer_id_autocompletion,
        subject: params.subject,
        body: params.body,
        ticket_article_type_id: type.id,
        ticket_article_sender_id: sender.id,
        form_id: this.form_id
      };
    } else {
      params['article'] = {
        from: (group && group.name) || '',
        to: params.customer_id_autocompletion,
        subject: params.subject,
        body: params.body,
        ticket_article_type_id: type.id,
        ticket_article_sender_id: sender.id,
        form_id: this.form_id
      };
    }
    object.load(params);
    errors = object.validate();
    if (errors) {
      this.log('error', errors);
      return this.formValidate({
        form: e.target,
        errors: errors
      });
    } else {
      this.formDisable(e);
      ui = this;
      return object.save({
        success: function() {
          var session;

          ui.notify({
            type: 'success',
            msg: App.i18n.translateInline('Ticket %s created!', this.number),
            link: "#ticket/zoom/" + this.id,
            timeout: 12000
          });
          App.TaskManager.remove(ui.task_key);
          ui.scrollTo();
          session = App.Session.all();
          if (session && session['group_ids'] && _.contains(session['group_ids'], this.group_id)) {
            ui.navigate("#ticket/zoom/" + this.id);
            return;
          }
          return ui.navigate("#");
        },
        error: function() {
          ui.log('save failed!');
          return ui.formEnable(e);
        }
      });
    }
  };

  return TicketCreate;

})(App.Controller);

UserNew = (function(_super) {
  __extends(UserNew, _super);

  function UserNew() {
    UserNew.__super__.constructor.apply(this, arguments);
    this.render();
  }

  UserNew.prototype.render = function() {
    this.html(App.view('agent_user_create')({
      head: 'New User'
    }));
    new App.ControllerForm({
      el: this.el.find('#form-user'),
      model: App.User,
      required: 'quick',
      autofocus: true
    });
    return this.modalShow();
  };

  UserNew.prototype.submit = function(e) {
    var errors, params, role, ui, user;

    e.preventDefault();
    params = this.formParam(e.target);
    if (!params.login && params.email) {
      params.login = params.email;
    }
    user = new App.User;
    role = App.Collection.findByAttribute('Role', 'name', 'Customer');
    params.role_ids = role.id;
    this.log('notice', 'updateAttributes', params);
    user.load(params);
    errors = user.validate();
    if (errors) {
      this.log('error', errors);
      this.formValidate({
        form: e.target,
        errors: errors
      });
      return;
    }
    ui = this;
    return user.save({
      success: function() {
        var callbackReload;

        callbackReload = function(user) {
          var realname;

          realname = user.displayName();
          ui.create_screen.el.find('[name=customer_id]').val(user.id);
          ui.create_screen.el.find('[name=customer_id_autocompletion]').val(realname);
          ui.userInfo({
            user_id: user.id
          });
          return ui.modalHide();
        };
        return App.Collection.find('User', this.id, callbackReload, true);
      },
      error: function() {
        return ui.modalHide();
      }
    });
  };

  return UserNew;

})(App.ControllerModal);

TicketCreateRouter = (function(_super) {
  __extends(TicketCreateRouter, _super);

  function TicketCreateRouter(params) {
    var clean_params, id;

    TicketCreateRouter.__super__.constructor.apply(this, arguments);
    if (!params['id']) {
      id = Math.floor(Math.random() * 99999);
      this.navigate("#ticket_create/" + params['type'] + "/id/" + id);
      return;
    }
    clean_params = {
      ticket_id: params.ticket_id,
      article_id: params.article_id,
      type: params.type,
      id: params.id
    };
    App.TaskManager.add('TicketCreateScreen-' + params['type'] + '-' + params['id'], 'TicketCreate', clean_params);
  }

  return TicketCreateRouter;

})(App.ControllerPermanent);

App.Config.set('ticket_create/:ticket_id/:article_id', TicketCreateRouter, 'Routes');

App.Config.set('ticket_create', TicketCreateRouter, 'Routes');

App.Config.set('ticket_create/:type', TicketCreateRouter, 'Routes');

App.Config.set('ticket_create/:type/id/:id', TicketCreateRouter, 'Routes');

App.Config.set('TicketNewCallOutbound', {
  prio: 8001,
  name: 'Call Outbound',
  target: '#ticket_create/call_outbound',
  role: ['Agent']
}, 'TaskActions');

App.Config.set('TicketNewCallInbound', {
  prio: 8002,
  name: 'Call Inbound',
  target: '#ticket_create/call_inbound',
  role: ['Agent']
}, 'TaskActions');

App.Config.set('TicketNewEmail', {
  prio: 8003,
  name: 'Email',
  target: '#ticket_create/email',
  role: ['Agent']
}, 'TaskActions');
